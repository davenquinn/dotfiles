#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

. $(brew --prefix)/etc/profile.d/z.sh
# Customize to your needs...

if [[ $(uname) == 'Linux' ]]; then
  screenfetch
fi

if [[ $(uname) == 'Darwin' ]]; then
  archey -c
fi

autoload -U zmv
# Use vim key bindings
bindkey -v

COREUTILS=$(brew --prefix coreutils)/libexec/gnubin

export DOTFILES="$HOME/Environment/dotfiles"
export LOCALBIN="$HOME/bin:$DOTFILES/bin"
export TEX_BIN="/usr/local/texlive/2014/bin/x86_64-darwin"

export PATH="$LOCALBIN:$TEX_BIN:$COREUTILS:$PATH"
# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Donâ€™t clear the screen after quitting a manual page
export MANPAGER="less -X";

# Link Homebrew casks in `/Applications` rather than `~/Applications`
export HOMEBREW_CASK_OPTS="--appdir=/Applications";

# Sometimes needed for installing things
export PKG_CONFIG_PATH="$(brew --prefix)/lib/pkgconfig:/usr/lib/pkgconfig:/opt/X11/lib/pkgconfig";

# Always enable colored `grep` output
export GREP_OPTIONS="--color=auto";

# Preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
  export EDITOR='vim'
else
  export EDITOR='vim'
fi

# Support `fuck` command for correcting screw-ups
eval $(thefuck --alias)

alias git='hub'

alias wow='git status'
alias such='git add'
alias very='git commit -m'
alias text-changes='git diff --color-words'
alias grr='git graph'

alias du='du -h'

export PYTHONDONTWRITEBYTECODE=True
export PIP_RESPECT_VIRTUALENV=true

function killport () {
  kill -9 `lsof -t -i :$1`
}

function pyview() {
  mvim -R `python -c "import os, $1; print os.path.dirname($1.__file__)"`
}

function diff() {
  git diff --color=always $1 $2 | less -r
}

# Add a newline before commands
precmd() { print "" }

#function env() {
  #print "  Command to edit local environment
  #env
     #.edit ........ modify environment in MacVim
     #.reload ..... reload environment definition
     #.print .. show environment (printenv alias)
     #"}
alias env.reload='source ~/.zshrc'
alias env.print='printenv'

# Project management
alias prm='. ~/Environment/dotfiles/bin/prm/prm.sh'
# AlphaMELTS
alias run-alphamelts='/Applications/alphamelts/1.5/run_alphamelts.command'

if [[ $(uname) == 'Linux' ]]; then
  alias env.edit='vim ~/Environment/dotfiles'
fi

if [[ $(uname) == 'Darwin' ]]; then
  # PostgreSQL
  export PGDATA=$HOME/Library/Databases/PostgreSQL/

  # GIS
  export GDAL_DRIVER_PATH="$(brew --prefix)/lib/gdalplugins"

  # Python virtualenvs
  export WORKON_HOME="$HOME/Environment/virtualenvs"
  export PROJECT_HOME="$HOME/Development"

  alias env.edit='mvim ~/Environment/dotfiles'

  alias pad='mvim -c "Pad ls"'

  #export CLICOLOR=1
  #export LSCOLORS=gxBxhxDxfxhxhxhxhxcxcx
  alias ls='ls --color'

  # Set up environment for ENVI and modify the IDL path:
  export IDL_PATH="<IDL_DEFAULT>:/Applications/exelis/CAT_ENVI/"

fi

# pyenv
export PYENV_ROOT="$(brew --prefix)/var/pyenv"
export PYTHON_CONFIGURE_OPTS="--enable-framework"
export PYENV_VIRTUALENVWRAPPER_PREFER_PYVENV="true"

# Add pyenv root to PATH
# and initialize pyenv
if [[ -d $PYENV_ROOT ]];then
    PATH="$PYENV_ROOT/bin:$PATH"
    # initialize pyenv
    eval "$(pyenv init -)"
    # initialize pyenv virtualenv
    eval "$(pyenv virtualenv-init -)"
    #eval "$(pyenv virtualenvwrapper -)"
fi

# nodenv
export NODENV_ROOT="$(brew --prefix)/var/nodenv"
if [[ -d $NODENV_ROOT ]];then
    PATH="$NODENV_ROOT/bin:$PATH"
    # initialize nodeenv
    eval "$(nodenv init -)"
fi

function install-gdal() {
  # Function to install GDAL from source including build shims
  v=$1
  if [ -z $v ]; then
    v=$(gdal-config --version)
  fi
  c="pip install "
  c+="--global-option build_ext "
  c+="--global-option \"-I$(brew --prefix)/include/gdal\" "\
  c+="gdal==$v"
  echo $c
  eval $c
}

alias calc="PYENV_VERSION=3.5.0 pyenv exec ipython --profile=calculator"
unalias py

if [ -f ~/.zshrc.local ]; then
  source ~/.zshrc.local
fi

# Alias to get bundle id
function bundle-id() {
  osascript -e "id of app \"${1}\""
}
