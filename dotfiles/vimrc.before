set nocompatible
let mapleader = ","

" Remaps search highlighting to clear with backslash
nnoremap \ :noh<return><esc>
" Remaps semicolon to the command leader (may change back to <space>)
noremap <space> :

" EasyMotion with basic leader
map <Leader> <Plug>(easymotion-prefix)

set backup 
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp 
set backupskip=/tmp/*,/private/tmp/* 
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp 
set writebackup

if has('mouse')
  set mouse=a
  if &term =~ "xterm" || &term =~ "screen"
    set ttymouse=xterm2
    " For older versions of vim, remap mouse periodically
    autocmd VimEnter,FocusGained,BufEnter * set ttymouse=xterm2
  endif
endif

set visualbell

"""" Code folding
set foldmethod=indent
set foldnestmax=10
set nofoldenable
set foldlevel=2

""" MUCOMPLETE is disabled
" Get rid of MUcomplete error that seems to hav
" to do with tab mapping
"imap <c-j> <plug>(MUcompleteFwd)

" Vertical splits by default
set splitright
" Easier split navigation
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
" Brackets for split cycling
nnoremap [ <C-W>W
nnoremap ] <C-W>w

" Maps gitgutter staging and undo
nmap <Leader>hs <Plug>GitGutterStageHunk
nmap <Leader>hr <Plug>GitGutterRevertHunk

" Map easier terminal escape
tnoremap <C-C> <C-W><C-C>

" Git status
ca Wow Gstatus

" word whitelist
set spellfile=$HOME/.words/en.utf-8.add

" Adds some files to NerdTreeIgnore
let NERDTreeIgnore = ['\.pyc$', '\.pyo$', '\.rbc$', '\.rbo$', '\.class$', '\.o$', '\~$']
let NERDTreeIgnore += ['\.DS_Store$','\.egg-info$[[dir]]','.sass-cache','__pycache__']

let NERDTreeSortOrder = [ '\/$','\.do$',"Makefile$",'']

if v:version < 704
  let g:pandoc#modules#disabled += ["bibliographies","command"]
endif
let g:pandoc#biblio#sources = 'g'
let g:pandoc#biblio#bibs = ['/Users/Daven/Resources/Papers/BibTeX/library.bib']
let g:pandoc#modules#disabled = ["folding"]
"let g:pandoc#completion#bib#mode = 'fallback'
" This might be making everything slow
let g:pandoc#syntax#conceal#use = 1

autocmd Filetype pandoc hi link texStatement pandocLaTeXMath

" VimPad
"let g:pad#dir = "~/Documents/Notes"
"let g:pad#open_in_split = 0
"let g:pad#search_backend = "ack"
"let g:pad#position = {'list': "full"}
"let g:pad#default_file_extension = "md"

autocmd FileType python BracelessEnable +indent +highlight
autocmd FileType haml,yaml,coffee BracelessEnable +indent +highlight

" commands for adding python breakpoints
au FileType python map <silent> <leader>I oimport IPython; IPython.embed(); raise<esc>
au FileType python map <silent> <leader>d oimport pdb; pdb.set_trace()<esc>
au FileType python map <silent> <leader>D Oimport pdb; pdb.set_trace()<esc>

let g:polyglot_disabled = ['python', 'coffeescript']
let g:python_highlight_file_headers_as_comments = 0
let g:python_higlight_all = 1

" Add syntax for alphamelts config
autocmd BufNewFile,BufRead *.melts-env setfiletype melts
autocmd BufNewFile,BufRead *.melts setfiletype melts

map <silent> <leader>e ggO#!/usr/bin/env <esc>

" Show syntax groups under cursor
nmap <leader>sp :call <SID>SynStack()<CR>
function! <SID>SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

nmap <leader>sy :call SynGroup()<CR>
function! SynGroup()
    let l:s = synID(line('.'), col('.'), 1)
    echo synIDattr(l:s, 'name') . ' -> ' . synIDattr(synIDtrans(l:s), 'name')
endfun

" Ctrl-P.vim mapping
"let g:ctrlp_working_path_mode = 0

let g:thematic#themes = {
\ 'default_theme'  : {
\   'colorscheme': 'davenquinn',
\   'background': 'dark',
\   'typeface': 'Hasklig',
\   'font-size': 14,
\   'linespace': 2
\ },
\ 'writer'  : {
\   'colorscheme': 'davenquinn',
\   'background': 'dark',
\   'typeface': 'Hasklig',
\   'font-size': 18,
\   'linespace': 4
\ },
\ 'thin' :{
\   'colorscheme': 'davenquinn',
\   'background': 'dark',
\   'typeface': 'Hasklig Light'
\ },
\ 'narrow': {
\   'typeface': 'M+ 1mn light',
\   'background': 'dark'
\ }
\ }

ca TN ThematicNext

"""" WRITING MODE ( from vim goyo config)

let g:limelight_conceal_guibg = '#010101'
let g:goyo_width = 85

function! s:goyo_enter()
  set noshowmode
  set noshowcmd
  Limelight 0.75
  Thematic writer
  GitGutterDisable
  " ...
endfunction

function! s:goyo_leave()
  set showmode
  set showcmd
  Limelight!
  Thematic default_theme
  GitGutterEnable
  " ...
endfunction

autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()

" Filetypes

autocmd FileType pandoc syn region pandocFilterComment matchgroup=pandocFilterCommentDelimiter start=#<!\=\(comment\|fixme\|margin\)># end=#<\/!\=\(comment\|fixme\|margin\)>#
autocmd FileType pandoc syn region pandocFilterHighlight matchgroup=pandocFilterHighlightDelimiter start=#<!\=highlight># end=#<\/!\=highlight>#
autocmd FileType pandoc syn region pandocFilterBox matchgroup=pandocFilterBoxDelimiter start=#<!\=box># end=#<\/!\=box>#

hi link pandocFilterCommentDelimiter Delimiter
hi link pandocFilterBoxDelimiter Delimiter
hi link pandocFilterHighlightDelimiter Delimiter

"autocmd VimEnter * if !argc() | VimFiler | endif
let g:NERDTreeHijackNetrw=0

"
"nerdtree stuff
let g:nerdtree_tabs_open_on_gui_startup = 0
let g:vimfiler_as_default_explorer = 1
let g:vimfiler_enable_auto_cd = 1

noremap <silent> <Leader>f :VimFilerBufferDir -create -parent -find -auto-cd<CR>
autocmd FileType vimfiler nnoremap <buffer> <C-w>v :vsplit<bar>:VimFilerBufferDir -create -parent -find -auto-cd<CR>

" We disabled -auto-cd for now
let g:vimfiler_tree_leaf_icon = "⠇"
let g:vimfiler_tree_opened_icon = "▼"
let g:vimfiler_tree_closed_icon = "▶︎"
let g:vimfiler_quick_look_command = 'qlmanage -p'

autocmd FileType vimfiler nmap <buffer> <2-LeftMouse>	<Plug>(vimfiler_expand_or_edit)
autocmd FileType vimfiler nnoremap <silent> <Up> k
autocmd FileType vimfiler nnoremap <silent> <Down> j
autocmd FileType vimfiler nmap <buffer> <Left> <Plug>(vimfiler_smart_h)
autocmd FileType vimfiler nmap <buffer> <Right> <Plug>(vimfiler_smart_l)
autocmd FileType vimfiler noremap <silent> cd  <Plug>(vimfiler_cd_vim_current_dir)
autocmd FileType vimfiler noremap <buffer> <C-l> <Plug>(vimfiler_preview_file)
autocmd FileType vimfiler nmap <buffer> w <Leader>j

nmap <Leader>m :<C-u>call vimfiler#mappings#do_switch_action('vsplit')<CR>

"autocmd FileType vimfiler DisableWhitespace
let g:extra_whitespace_ignored_filetypes = ['unite', 'vimfiler', 'terminal']

"
"Vim-pencil

"augroup pencil
  "autocmd!
  "autocmd FileType markdown,mkd call pencil#init()
  "autocmd FileType text         call pencil#init()
"augroup END
"

command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   "rg --no-ignore-vcs -g '!{.git,node_modules}' --column --line-number --no-heading --color=always ".shellescape(<q-args>), 1,
  \   <bang>0 ? fzf#vim#with_preview('up:60%')
  \           : fzf#vim#with_preview('right:50%:hidden', '?'),
  \   <bang>0)

let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

let g:fzf_layout = { 'window': 'vertical'}


nnoremap <silent> <leader><space> :Files<CR>
nnoremap <silent> <leader>b :Buffers<CR>
nnoremap <silent> <leader>r :Rg<CR>

autocmd! FileType fzf
autocmd  FileType fzf set laststatus=0 noshowmode noruler
  \| autocmd BufLeave <buffer> set laststatus=2 showmode ruler

" Disable annoying autocomplete
let g:jedi#auto_initialization = 0
